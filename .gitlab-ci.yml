# set to local images because too long execution
image: onegreyonewhite/tox:tox

variables:
  TESTS: "polemarch.main.tests"
  GET_SOURCES_ATTEMPTS: 3
  ARTIFACT_DOWNLOAD_ATTEMPTS: 3
  RESTORE_CACHE_ATTEMPTS: 3
  DJANGO_LOG_LEVEL: 'ERROR'
  TOX_ARGS: "--workdir /cache/.tox_polemarch_${CI_BUILD_REF_NAME}"
  CCACHE_DIR: /cache/.ccache
  CC: ccache gcc

stages:
  - code_standarts
  - build
  - test
  - packaging-test
  - release
  - publish

# Test templates
###########################################
.branch_tests_template: &branch_tests
  stage: test
  image: onegreyonewhite/tox:tox
  variables:
    TOX_ENVS: ""
  before_script:
    - if [ "${CI_BUILD_REF_NAME}" != "master" -a "${CI_BUILD_REF_NAME}" != "developer" ]; then export TOX_ARGS="--workdir /tmp/.tox_polemarchplus_${CI_BUILD_REF_NAME}"; fi
  script:
   - make test ENVS=$TOX_ENVS
   - make build-clean
  except:
    refs:
      - GUI
      - master
      - tags
      - issue_building
  only:
    refs:
      - merge_requests
      - web
    changes:
      - polemarch/main/**/*
      - polemarch/api/**/*
      - tests.py
      - setup.{py,cfg}
      - MANIFEST.in
      - requirements.txt
      - requirements-test.txt
      - Makefile
      - tox.ini
      - .coveragerc
      - .gitlab-ci.yml
  retry: 2

# Branch tests
###########################################
code_style:
  stage: code_standarts
  image: onegreyonewhite/tox:tox
  variables:
    TOX_ARGS: "--workdir /cache/.tox_polemarch_code"
  script:
   - make test ENVS=flake,pylint
  except:
    refs:
      - tags
      - issue_building
  only:
    refs:
      - merge_requests
      - web
    changes:
    - polemarch/main/**/*
    - polemarch/api/**/*
    - requirements.txt
    - Makefile
    - tox.ini
    - .pylintrc
    - .pep8
  retry: 2

py37-coverage:
  <<: *branch_tests
  variables:
    TOX_ENVS: "$CI_BUILD_NAME"
  allow_failure: true

py36-install:
  <<: *branch_tests
  variables:
    TOX_ENVS: "$CI_BUILD_NAME"

master_coverage:
  <<: *branch_tests
  variables:
    TOX_ENVS: "py37-coverage"
  except:
  only:
    refs:
      - master

# Realese
###########################################
pages:
  stage: release
  script:
    - make test ENVS=builddoc
    - mv doc/_build/html public
  artifacts:
    paths:
    - public
  only:
    refs:
      - developer
  when: always

release:
  stage: release
  image: onegreyonewhite/tox:tox
  only:
    refs:
      - master
    variables:
      - $GIT_ACCESS_USER
      - $GIT_ACCESS_PASSWORD
  before_script:
    - url_host=`echo "${CI_REPOSITORY_URL}" | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git remote set-url origin "https://${GIT_ACCESS_USER}:${GIT_ACCESS_PASSWORD}@${url_host}"
  script:
    - bash autorelease.sh

release_pypi:
  stage: release
  image: onegreyonewhite/tox:centos6
  only:
    refs:
    - tags
    variables:
    - $PYPI_UPLOAD_PASSWORD
    - $PYPI_UPLOAD_NAME
  variables:
    TOX_ARGS: ""
  script:
   - make test ENVS=build
  allow_failure: true
  artifacts:
    name: "release-rpm-${CI_BUILD_REF_NAME}.${CI_BUILD_ID}"
    paths:
    - dist/

publish_pypi:
  stage: publish
  image: onegreyonewhite/tox:tox
  only:
    refs:
      - tags
    variables:
      - $PYPI_UPLOAD_PASSWORD
      - $PYPI_UPLOAD_NAME
  script:
  - twine upload -u ${PYPI_UPLOAD_NAME} -p ${PYPI_UPLOAD_PASSWORD} dist/*.tar.gz dist/*.whl


publish_release:
  stage: publish
  image: onegreyonewhite/tox:ubuntu
  allow_failure: true
  only:
    refs:
    - tags
    variables:
    - $PYPI_UPLOAD_PASSWORD
    - $PYPI_UPLOAD_NAME
  variables:
    TOX_ARGS: ""
  before_script:
  - git config --global user.name "${GITLAB_USER_NAME}"
  - git config --global user.email "${GITLAB_USER_EMAIL}"
  - git push https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/vstconsulting/polemarch.git "${CI_COMMIT_TAG}"
  script:
  - make test ENVS=release
