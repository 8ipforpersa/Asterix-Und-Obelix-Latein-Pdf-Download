# set to local images because too long execution
image: onegreyonewhite/tox:tox

variables:
  TESTS: "polemarch.main.tests"
  GET_SOURCES_ATTEMPTS: 3
  ARTIFACT_DOWNLOAD_ATTEMPTS: 3
  RESTORE_CACHE_ATTEMPTS: 3
  DJANGO_LOG_LEVEL: 'ERROR'
  TOX_ARGS: "--workdir /cache/.tox_polemarch_${CI_BUILD_REF_NAME}"

stages:
  - code_standarts
  - build
  - test
  - packaging-test
  - release
  - publish

# Test templates
###########################################
.branch_tests_template: &branch_tests
  stage: test
  image: onegreyonewhite/tox:tox
  variables:
    TOX_ENVS: ""
  script:
   - make test ENVS=$TOX_ENVS
   - make build-clean
  except:
    - GUI
    - tags
    - issue_building
  only:
    changes:
      - polemarch/api/*
      - polemarch/main/*
      - tests.py
      - setup.py
      - setup.cfg
      - MANIFEST.in
      - requirements*
      - tox.ini
      - .giltab-ci.yml
  retry: 2

.pack_tamplate: &packing-test
  stage: packaging-test
  image: onegreyonewhite/tox:tox
  variables:
    MYSQL_ROOT_PASSWORD: 'polemarch'
    MYSQL_DATABASE: 'polemarch'
    MYSQL_USER: 'polemarch'
    MYSQL_PASSWORD: 'polemarch'
  services:
    - name: 'mariadb:latest'
      alias: 'db-server'
    - name: 'redis'
      alias: 'redis-server'
  artifacts:
    name: "package($CI_BUILD_NAME)"
    expire_in: 1 hour
    paths:
    - dist/
  allow_failure: false
  only:
    - master
    - issue_building
  retry: 2

.publish_template: &publishing
  stage: publish
  image: onegreyonewhite/tox:ubuntu
  allow_failure: true
  only:
   - tags
  before_script:
  - git remote add ${PUBLISH_REMOTE_NAME} ${PUBLISH_REMOTE_URI}
  script:
  - git push -f ${PUBLISH_REMOTE_NAME} master
  - git push -f ${PUBLISH_REMOTE_NAME} ${CI_COMMIT_TAG}

# Branch tests
###########################################
code_style:
  stage: code_standarts
  image: onegreyonewhite/tox:tox
  variables:
    TOX_ARGS: "--workdir /cache/.tox_polemarch_code"
  script:
   - make test ENVS=flake,pylint
  except:
    - tags
    - issue_building
  only:
    refs:
      - /^.{0,}issue_.*$/
      - developer
      - master
    changes:
      - polemarch/api/*
      - polemarch/main/*
      - tests.py
      - requirements*
      - tox.ini
      - .giltab-ci.yml
      - .pep8
      - .pylintrc
  retry: 2

py27-install:
  <<: *branch_tests
  variables:
    TOX_ENVS: "$CI_BUILD_NAME"

py36-install:
  <<: *branch_tests
  variables:
    TOX_ENVS: "$CI_BUILD_NAME"

####################################################
# DEPRECATED
default_rpm_tests:
  <<: *packing-test
  script:
   - cat /etc/hosts
   - tox ${TOX_ARGS} -e rpm RELEASE=${CI_BUILD_ID}
   - sudo yum install dist/*.rpm -y -q
   - sudo cat test_settings.ini > /etc/polemarch/settings.ini
   - sudo chown polemarch:polemarch /etc/polemarch/settings.ini
   - sudo -H -u polemarch /opt/polemarch/bin/pip install -r requirements-test.txt
   - sudo -H -u polemarch /opt/polemarch/bin/polemarchctl test -v2 polemarch.main.tests --failfast

default_deb_tests:
  <<: *packing-test
  image: onegreyonewhite/tox:ubuntu
  script:
   - cat /etc/hosts
   - tox ${TOX_ARGS} -e deb RELEASE=${CI_BUILD_ID} RELOCATE_BIN=/usr/local/bin/venvctrl-relocate INSTALL_PY=python3
   - echo "echo 'hello'" > /bin/systemctl
   - sudo apt update
   - sudo apt install ./dist/*.deb -y -q
   - sudo cat test_settings.ini > /etc/polemarch/settings.ini
   - sudo chown polemarch:polemarch /etc/polemarch/settings.ini
   - sudo -H -u polemarch /opt/polemarch/bin/pip install -r requirements-test.txt
   - sudo -H -u polemarch /opt/polemarch/bin/polemarchctl test -v2 polemarch.main.tests --failfast

# Realese
###########################################
pages:
  stage: release
  script:
    - make test ENVS=builddoc
    - mv doc/_build/html public
  artifacts:
    paths:
    - public
  only:
    refs:
      - developer
    changes:
      - doc/*

release_pypi:
  stage: release
  only:
   - tags
  before_script:
  - pip install vstcompile[doc]
  script:
   - make test ENVS=build
  allow_failure: true
  artifacts:
    name: "release-rpm-${CI_BUILD_REF_NAME}.${CI_BUILD_ID}"
    paths:
    - dist/

publish_pypi:
  stage: publish
  image: onegreyonewhite/tox:ubuntu
  only:
    refs:
      - tags
    variables:
      - $PYPI_UPLOAD_PASSWORD
  script:
  - twine upload -u ${PYPI_UPLOAD_NAME} -p ${PYPI_UPLOAD_PASSWORD} dist/*.tar.gz

# DEPRECATED
release_rpm:
  stage: release
  only:
   - tags
  script:
   - make test ENVS=rpm
  allow_failure: false
  artifacts:
    name: "release-rpm-${CI_BUILD_REF_NAME}.${CI_BUILD_ID}"
    paths:
    - dist/

release_deb:
  stage: release
  only:
   - tags
  image: onegreyonewhite/tox:ubuntu
  script:
   - make test ENVS=deb
  allow_failure: false
  artifacts:
    name: "release-rpm-${CI_BUILD_REF_NAME}.${CI_BUILD_ID}"
    paths:
    - dist/

# DEPRECATED
#publish_gitlab:
#  <<: *publishing
#  variables:
#    PUBLISH_REMOTE_USER: "gitlab-ci-token"
#    PUBLISH_REMOTE_TOKEN: "${GITLAB_TOKEN}"
#
#publish_release:
#  <<: *publishing
#  variables:
#    PUBLISH_REMOTE_USER: "${GITHUB_USER}"
#    PUBLISH_REMOTE_TOKEN: "${GITHUB_TOKEN}"
#    PUBLISH_REMOTE_SERVER: 'github.com'
#  after_script:
#  - make test ENVS=release
