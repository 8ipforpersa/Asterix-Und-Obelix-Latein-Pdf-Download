# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2018-05-16 05:28
from __future__ import unicode_literals

import json
from django.conf import settings
from django.db import migrations, models
from django.contrib.auth.hashers import make_password
import django.db.models.deletion
import django.utils.timezone
import polemarch.main.models.base
import uuid


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# polemarch.main.migrations.0001_initial
# polemarch.main.migrations.0024_migrate_templates
# polemarch.main.migrations.0027_migrate_periodic_task
# polemarch.main.migrations.0035_usersettings
# polemarch.main.migrations.0039_migrate_history



def create_admin_user(apps, schema_editor):
    User = apps.get_registered_model('auth', 'User')
    admin = User(
        username='admin',
        email='admin@domain.com',
        password=make_password('admin'),
        is_superuser=True,
        is_staff=True
    )
    admin.save()


def migrate_templates(apps, schema_editor):
    Template = apps.get_registered_model('main', 'Template')
    for template in Template.objects.all():
        template.data = json.loads(template.template_data)
        template.save()


def migrate_periodic_tasks(apps, schema_editor):
    PeriodicTask = apps.get_registered_model('main', 'PeriodicTask')
    PeriodicTask.objects.filter(project=None).delete()


def create_user_settings(apps, schema_editor):
    User = apps.get_registered_model('auth', 'User')
    UserSettings = apps.get_registered_model('main', 'UserSettings')
    for user in User.objects.all():
        UserSettings.objects.create(user=user)


def migrate_history(apps, schema_editor):
    History = apps.get_registered_model('main', 'History')
    User = apps.get_registered_model('auth', 'User')
    for history in History.objects.filter(initiator_type="users"):
        history.executor = User(pk=history.initiator)
        history.initiator_type = "project"
        history.initiator = history.project_id
        history.save()



class Migration(migrations.Migration):

    replaces = [('main', '0001_initial'), ('main', '0002_initial'), ('main', '0003_initial'), ('main', '0004_auto_20170710_0857'), ('main', '0005_auto_20170711_1118'), ('main', '0006_auto_20170711_1546'), ('main', '0007_history_task_id'), ('main', '0008_auto_20170717_1437'), ('main', '0009_remove_history_task_id'), ('main', '0010_auto_20170721_0441'), ('main', '0011_auto_20170724_0139'), ('main', '0012_auto_20170725_0122'), ('main', '0013_auto_20170725_2314'), ('main', '0014_auto_20170727_0618'), ('main', '0015_auto_20170814_1731'), ('main', '0016_typespermissions_template'), ('main', '0017_periodictask_save_result'), ('main', '0018_auto_20170929_0657'), ('main', '0019_auto_20171025_0104'), ('main', '0020_auto_20171031_0400'), ('main', '0021_usergroup'), ('main', '0022_auto_20171110_0857'), ('main', '0023_auto_20171110_1709'), ('main', '0024_migrate_templates'), ('main', '0025_auto_20171120_1126'), ('main', '0026_auto_20171122_0145'), ('main', '0027_migrate_periodic_task'), ('main', '0028_auto_20171123_0532'), ('main', '0029_auto_20171127_0801'), ('main', '0030_auto_20171127_0801'), ('main', '0031_periodictask_inventory_file'), ('main', '0032_history_json_args'), ('main', '0033_auto_20171211_0732'), ('main', '0034_periodictask_enabled'), ('main', '0035_usersettings'), ('main', '0035_template_options_data'), ('main', '0036_merge_20180226_0050'), ('main', '0037_auto_20180403_0113'), ('main', '0038_history_executor'), ('main', '0039_migrate_history'), ('main', '0040_history_json_options'), ('main', '0041_auto_20180502_2355'), ('main', '0038_auto_20180420_0836'), ('main', '0039_auto_20180420_0908'), ('main', '0042_merge_20180504_0359'), ('main', '0043_usergroup_notes'), ('main', '0044_auto_20180515_0304')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0006_require_contenttypes_0002'),
        ('auth', '0008_alter_user_username_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.RunPython(
            code=create_admin_user,
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('type', models.CharField(default='Default', max_length=20)),
                ('key', models.CharField(blank=True, max_length=2048, null=True)),
                ('_data', models.CharField(db_column='data', default='{}', max_length=2048)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('group', models.BooleanField(default=False)),
                ('address', models.CharField(default=uuid.uuid1, max_length=128, unique=True)),
                ('name', models.CharField(default='null', max_length=100)),
                ('auth_user', models.CharField(default='', max_length=64)),
                ('auth_type', models.CharField(default='PASSWD', max_length=6)),
                ('auth_data', models.CharField(default='', max_length=4096)),
                ('nodeid', models.CharField(blank=True, max_length=256, null=True)),
                ('environment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hosts', to='main.Environment')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hosts', to='main.Host')),
            ],
            options={
                'default_related_name': 'hosts',
            },
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('group', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Scenario')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('group', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('data', models.TextField()),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskList',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('priority', models.PositiveIntegerField(default=0)),
                ('scenario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasklist', to='main.Scenario')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasklist', to='main.Task')),
            ],
            options={
                'default_related_name': 'tasklist',
                'ordering': ['scenario', 'priority', 'id'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='tasklist',
            unique_together=set([('scenario', 'task', 'priority')]),
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(default=uuid.uuid1, max_length=512)),
            ],
            options={
                'default_related_name': 'groups',
            },
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('object_id', models.PositiveIntegerField()),
                ('key', models.CharField(max_length=128)),
                ('value', models.CharField(max_length=2048)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='scenario',
            name='parent',
        ),
        migrations.RemoveField(
            model_name='task',
            name='parent',
        ),
        migrations.AlterUniqueTogether(
            name='tasklist',
            unique_together=set([]),
        ),
        migrations.RemoveField(
            model_name='tasklist',
            name='scenario',
        ),
        migrations.RemoveField(
            model_name='tasklist',
            name='task',
        ),
        migrations.RemoveField(
            model_name='host',
            name='address',
        ),
        migrations.RemoveField(
            model_name='host',
            name='auth_data',
        ),
        migrations.RemoveField(
            model_name='host',
            name='auth_type',
        ),
        migrations.RemoveField(
            model_name='host',
            name='auth_user',
        ),
        migrations.RemoveField(
            model_name='host',
            name='group',
        ),
        migrations.RemoveField(
            model_name='host',
            name='nodeid',
        ),
        migrations.RemoveField(
            model_name='host',
            name='parent',
        ),
        migrations.AlterField(
            model_name='host',
            name='name',
            field=models.CharField(default=uuid.uuid1, max_length=512),
        ),
        migrations.DeleteModel(
            name='Scenario',
        ),
        migrations.DeleteModel(
            name='Task',
        ),
        migrations.DeleteModel(
            name='TaskList',
        ),
        migrations.AddField(
            model_name='group',
            name='hosts',
            field=models.ManyToManyField(related_name='groups', to='main.Host'),
        ),
        migrations.AddField(
            model_name='host',
            name='type',
            field=models.CharField(default='HOST', max_length=5),
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('playbook', models.CharField(max_length=256)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('stop_time', models.DateTimeField(blank=True, null=True)),
                ('raw_args', models.TextField(default='')),
                ('raw_inventory', models.TextField(default='')),
                ('status', models.CharField(max_length=50)),
            ],
            options={
                'default_related_name': 'history',
            },
        ),
        migrations.CreateModel(
            name='HistoryLines',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('line', models.TextField(default='')),
                ('line_number', models.IntegerField(default=0)),
                ('history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_history_line', related_query_name='raw_history_line', to='main.History')),
            ],
            options={
                'default_related_name': 'raw_history_line',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(default=uuid.uuid1, max_length=512)),
            ],
            options={
                'default_related_name': 'inventories',
            },
        ),
        migrations.CreateModel(
            name='PeriodicTask',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(default=uuid.uuid1, max_length=512)),
                ('playbook', models.CharField(max_length=256)),
                ('schedule', models.CharField(max_length=4096)),
                ('type', models.CharField(max_length=10)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='periodic_tasks', related_query_name='periodic_tasks', to='main.Inventory')),
            ],
            options={
                'default_related_name': 'periodic_tasks',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(default=uuid.uuid1, max_length=512)),
                ('repository', models.CharField(max_length=2048)),
                ('status', models.CharField(default='NEW', max_length=32)),
            ],
            options={
                'default_related_name': 'projects',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(default=uuid.uuid1, max_length=256)),
                ('playbook', models.CharField(max_length=256)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', related_query_name='tasks', to='main.Project')),
            ],
            options={
                'default_related_name': 'tasks',
            },
        ),
        migrations.CreateModel(
            name='TypesPermissions',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
            ],
            options={
                'default_related_name': 'related_objects',
            },
        ),
        migrations.RemoveField(
            model_name='host',
            name='environment',
        ),
        migrations.AddField(
            model_name='group',
            name='children',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='group',
            name='parents',
            field=models.ManyToManyField(blank=True, null=True, related_name='groups', related_query_name='childrens', to='main.Group'),
        ),
        migrations.AlterField(
            model_name='variable',
            name='value',
            field=models.CharField(max_length=2048, null=True),
        ),
        migrations.AlterIndexTogether(
            name='group',
            index_together=set([('children',), ('children', 'id')]),
        ),
        migrations.DeleteModel(
            name='Environment',
        ),
        migrations.AddField(
            model_name='typespermissions',
            name='groups',
            field=models.ManyToManyField(blank=True, null=True, related_name='related_objects', related_query_name='related_objects', to='main.Group'),
        ),
        migrations.AddField(
            model_name='typespermissions',
            name='history',
            field=models.ManyToManyField(blank=True, null=True, related_name='related_objects', related_query_name='related_objects', to='main.History'),
        ),
        migrations.AddField(
            model_name='typespermissions',
            name='hosts',
            field=models.ManyToManyField(blank=True, null=True, related_name='related_objects', related_query_name='related_objects', to='main.Host'),
        ),
        migrations.AddField(
            model_name='typespermissions',
            name='inventories',
            field=models.ManyToManyField(blank=True, null=True, related_name='related_objects', related_query_name='related_objects', to='main.Inventory'),
        ),
        migrations.AddField(
            model_name='typespermissions',
            name='periodic_tasks',
            field=models.ManyToManyField(blank=True, null=True, related_name='related_objects', related_query_name='related_objects', to='main.PeriodicTask'),
        ),
        migrations.AddField(
            model_name='typespermissions',
            name='projects',
            field=models.ManyToManyField(blank=True, null=True, related_name='related_objects', related_query_name='related_objects', to='main.Project'),
        ),
        migrations.AddField(
            model_name='typespermissions',
            name='tasks',
            field=models.ManyToManyField(blank=True, null=True, related_name='related_objects', related_query_name='related_objects', to='main.Task'),
        ),
        migrations.AddField(
            model_name='typespermissions',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_objects', related_query_name='related_objects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='groups',
            field=models.ManyToManyField(blank=True, null=True, related_name='projects', to='main.Group'),
        ),
        migrations.AddField(
            model_name='project',
            name='hosts',
            field=models.ManyToManyField(blank=True, null=True, related_name='projects', to='main.Host'),
        ),
        migrations.AddField(
            model_name='project',
            name='inventories',
            field=models.ManyToManyField(blank=True, null=True, related_name='projects', to='main.Inventory'),
        ),
        migrations.AddField(
            model_name='periodictask',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='periodic_tasks', related_query_name='periodic_tasks', to='main.Project'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='groups',
            field=models.ManyToManyField(related_name='inventories', to='main.Group'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='hosts',
            field=models.ManyToManyField(related_name='inventories', to='main.Host'),
        ),
        migrations.AddField(
            model_name='history',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', related_query_name='history', to='main.Project'),
        ),
        migrations.AlterIndexTogether(
            name='historylines',
            index_together=set([('history',), ('history', 'line_number'), ('line_number',)]),
        ),
        migrations.AlterIndexTogether(
            name='history',
            index_together=set([('id', 'project', 'playbook', 'status', 'start_time', 'stop_time')]),
        ),
        migrations.AddField(
            model_name='history',
            name='inventory',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='history', related_query_name='history', to='main.Inventory'),
        ),
        migrations.AlterIndexTogether(
            name='history',
            index_together=set([('id', 'project', 'playbook', 'status', 'inventory', 'start_time', 'stop_time')]),
        ),
        migrations.AlterModelOptions(
            name='history',
            options={'ordering': ['-id']},
        ),
        migrations.AddField(
            model_name='history',
            name='task_id',
            field=models.CharField(blank=True, default=None, max_length=50, null=True),
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=512)),
                ('kind', models.CharField(max_length=32)),
                ('template_data', models.TextField(default='')),
            ],
        ),
        migrations.AlterIndexTogether(
            name='template',
            index_together=set([('id', 'name', 'kind')]),
        ),
        migrations.RemoveField(
            model_name='history',
            name='task_id',
        ),
        migrations.RenameField(
            model_name='history',
            old_name='playbook',
            new_name='name',
        ),
        migrations.AddField(
            model_name='history',
            name='kind',
            field=models.CharField(default='PLAYBOOK', max_length=50),
        ),
        migrations.AlterIndexTogether(
            name='history',
            index_together=set([('id', 'project', 'name', 'status', 'inventory', 'start_time', 'stop_time')]),
        ),
        migrations.AlterField(
            model_name='history',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='history', related_query_name='history', to='main.Project'),
        ),
        migrations.RenameField(
            model_name='periodictask',
            old_name='playbook',
            new_name='mode',
        ),
        migrations.AddField(
            model_name='periodictask',
            name='kind',
            field=models.CharField(default='PLAYBOOK', max_length=50),
        ),
        migrations.AlterField(
            model_name='periodictask',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='periodic_tasks', related_query_name='periodic_tasks', to='main.Project'),
        ),
        migrations.RenameField(
            model_name='history',
            old_name='name',
            new_name='mode',
        ),
        migrations.AlterIndexTogether(
            name='history',
            index_together=set([('id', 'project', 'mode', 'status', 'inventory', 'start_time', 'stop_time')]),
        ),
        migrations.AddField(
            model_name='history',
            name='initiator',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='history',
            name='initiator_type',
            field=models.CharField(default='users', max_length=50),
        ),
        migrations.AlterIndexTogether(
            name='history',
            index_together=set([('id', 'project', 'mode', 'status', 'inventory', 'start_time', 'stop_time', 'initiator', 'initiator_type')]),
        ),
        migrations.AddField(
            model_name='typespermissions',
            name='template',
            field=models.ManyToManyField(blank=True, null=True, related_name='related_objects', related_query_name='related_objects', to='main.Template'),
        ),
        migrations.AddField(
            model_name='periodictask',
            name='save_result',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='group',
            name='hosts',
            field=models.ManyToManyField(related_name='groups', related_query_name='groups', to='main.Host'),
        ),
        migrations.CreateModel(
            name='ACLPermission',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('role', models.CharField(max_length=10)),
            ],
        ),
        migrations.RemoveField(
            model_name='typespermissions',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='typespermissions',
            name='history',
        ),
        migrations.RemoveField(
            model_name='typespermissions',
            name='hosts',
        ),
        migrations.RemoveField(
            model_name='typespermissions',
            name='inventories',
        ),
        migrations.RemoveField(
            model_name='typespermissions',
            name='periodic_tasks',
        ),
        migrations.RemoveField(
            model_name='typespermissions',
            name='projects',
        ),
        migrations.RemoveField(
            model_name='typespermissions',
            name='tasks',
        ),
        migrations.RemoveField(
            model_name='typespermissions',
            name='template',
        ),
        migrations.RemoveField(
            model_name='typespermissions',
            name='user',
        ),
        migrations.AddField(
            model_name='group',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_group_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='host',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_host_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inventory',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_inventory_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='periodictask',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_periodictask_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_project_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='template',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_template_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='group',
            name='hosts',
            field=models.ManyToManyField(related_query_name='groups', to='main.Host'),
        ),
        migrations.AlterField(
            model_name='group',
            name='parents',
            field=models.ManyToManyField(blank=True, null=True, related_query_name='childrens', to='main.Group'),
        ),
        migrations.AlterField(
            model_name='history',
            name='inventory',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_query_name='history', to='main.Inventory'),
        ),
        migrations.AlterField(
            model_name='history',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_query_name='history', to='main.Project'),
        ),
        migrations.AlterField(
            model_name='historylines',
            name='history',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_query_name='raw_history_line', to='main.History'),
        ),
        migrations.AlterField(
            model_name='inventory',
            name='groups',
            field=models.ManyToManyField(to='main.Group'),
        ),
        migrations.AlterField(
            model_name='inventory',
            name='hosts',
            field=models.ManyToManyField(to='main.Host'),
        ),
        migrations.AlterField(
            model_name='periodictask',
            name='inventory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_query_name='periodic_tasks', to='main.Inventory'),
        ),
        migrations.AlterField(
            model_name='periodictask',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_query_name='periodic_tasks', to='main.Project'),
        ),
        migrations.AlterField(
            model_name='project',
            name='groups',
            field=models.ManyToManyField(blank=True, null=True, to='main.Group'),
        ),
        migrations.AlterField(
            model_name='project',
            name='hosts',
            field=models.ManyToManyField(blank=True, null=True, to='main.Host'),
        ),
        migrations.AlterField(
            model_name='project',
            name='inventories',
            field=models.ManyToManyField(blank=True, null=True, to='main.Inventory'),
        ),
        migrations.AlterField(
            model_name='task',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_query_name='tasks', to='main.Project'),
        ),
        migrations.DeleteModel(
            name='TypesPermissions',
        ),
        migrations.AddField(
            model_name='aclpermission',
            name='uagroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group'),
        ),
        migrations.AddField(
            model_name='aclpermission',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='group',
            name='permissions',
            field=models.ManyToManyField(blank=True, null=True, to='main.ACLPermission'),
        ),
        migrations.AddField(
            model_name='host',
            name='permissions',
            field=models.ManyToManyField(blank=True, null=True, to='main.ACLPermission'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='permissions',
            field=models.ManyToManyField(blank=True, null=True, to='main.ACLPermission'),
        ),
        migrations.AddField(
            model_name='periodictask',
            name='permissions',
            field=models.ManyToManyField(blank=True, null=True, to='main.ACLPermission'),
        ),
        migrations.AddField(
            model_name='project',
            name='permissions',
            field=models.ManyToManyField(blank=True, null=True, to='main.ACLPermission'),
        ),
        migrations.AddField(
            model_name='template',
            name='permissions',
            field=models.ManyToManyField(blank=True, null=True, to='main.ACLPermission'),
        ),
        migrations.AlterUniqueTogether(
            name='aclpermission',
            unique_together=set([('user', 'uagroup', 'role')]),
        ),
        migrations.AlterUniqueTogether(
            name='aclpermission',
            unique_together=set([]),
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('parent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('owner', models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_usergroup_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=('auth.group', models.Model),
        ),
        migrations.AlterField(
            model_name='aclpermission',
            name='uagroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.UserGroup'),
        ),
        migrations.AlterField(
            model_name='group',
            name='hosts',
            field=polemarch.main.models.base.ManyToManyFieldACL(related_name='groups', related_query_name='groups', to='main.Host'),
        ),
        migrations.AlterField(
            model_name='inventory',
            name='hosts',
            field=polemarch.main.models.base.ManyToManyFieldACL(related_name='inventories', to='main.Host'),
        ),
        migrations.AlterField(
            model_name='project',
            name='hosts',
            field=polemarch.main.models.base.ManyToManyFieldACL(blank=True, null=True, related_name='projects', to='main.Host'),
        ),
        migrations.AddField(
            model_name='template',
            name='inventory',
            field=models.CharField(blank=True, default=None, max_length=128, null=True),
        ),
        migrations.AddField(
            model_name='template',
            name='project',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Project'),
        ),
        migrations.AlterIndexTogether(
            name='template',
            index_together=set([('id', 'name', 'kind', 'inventory', 'project')]),
        ),
        migrations.RunPython(
            code=migrate_templates,
        ),
        migrations.CreateModel(
            name='Hook',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(default=uuid.uuid1, max_length=512)),
                ('when', models.CharField(default=None, max_length=512, null=True)),
                ('type', models.CharField(max_length=32)),
                ('recipients', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='group',
            name='parents',
            field=polemarch.main.models.base.ManyToManyFieldACLReverse(blank=True, null=True, related_name='groups', related_query_name='childrens', to='main.Group'),
        ),
        migrations.AlterField(
            model_name='inventory',
            name='groups',
            field=polemarch.main.models.base.ManyToManyFieldACL(related_name='inventories', to='main.Group'),
        ),
        migrations.AlterField(
            model_name='project',
            name='groups',
            field=polemarch.main.models.base.ManyToManyFieldACL(blank=True, null=True, related_name='projects', to='main.Group'),
        ),
        migrations.AlterField(
            model_name='project',
            name='inventories',
            field=polemarch.main.models.base.ManyToManyFieldACL(blank=True, null=True, related_name='projects', to='main.Inventory'),
        ),
        migrations.RenameField(
            model_name='template',
            old_name='permissions',
            new_name='acl',
        ),
        migrations.RemoveField(
            model_name='group',
            name='permissions',
        ),
        migrations.RemoveField(
            model_name='host',
            name='permissions',
        ),
        migrations.RemoveField(
            model_name='inventory',
            name='permissions',
        ),
        migrations.RemoveField(
            model_name='periodictask',
            name='permissions',
        ),
        migrations.RemoveField(
            model_name='project',
            name='permissions',
        ),
        migrations.AddField(
            model_name='group',
            name='acl',
            field=models.ManyToManyField(blank=True, null=True, related_name='groups', to='main.ACLPermission'),
        ),
        migrations.AddField(
            model_name='host',
            name='acl',
            field=models.ManyToManyField(blank=True, null=True, related_name='hosts', to='main.ACLPermission'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='acl',
            field=models.ManyToManyField(blank=True, null=True, related_name='inventories', to='main.ACLPermission'),
        ),
        migrations.AddField(
            model_name='periodictask',
            name='acl',
            field=models.ManyToManyField(blank=True, null=True, related_name='periodic_tasks', to='main.ACLPermission'),
        ),
        migrations.AddField(
            model_name='project',
            name='acl',
            field=models.ManyToManyField(blank=True, null=True, related_name='projects', to='main.ACLPermission'),
        ),
        migrations.AddField(
            model_name='usergroup',
            name='acl',
            field=models.ManyToManyField(blank=True, null=True, to='main.ACLPermission'),
        ),
        migrations.AlterField(
            model_name='hook',
            name='when',
            field=models.CharField(default=None, max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name='template',
            name='project',
            field=polemarch.main.models.base.ForeignKeyACL(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Project'),
        ),
        migrations.RunPython(
            code=migrate_periodic_tasks,
        ),
        migrations.AlterField(
            model_name='periodictask',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='periodic_tasks', related_query_name='periodic_tasks', to='main.Project'),
        ),
        migrations.AlterField(
            model_name='periodictask',
            name='inventory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='periodic_tasks', related_query_name='periodic_tasks', to='main.Inventory'),
        ),
        migrations.RenameField(
            model_name='periodictask',
            old_name='inventory',
            new_name='_inventory',
        ),
        migrations.AddField(
            model_name='periodictask',
            name='inventory_file',
            field=models.CharField(blank=True, max_length=2048, null=True),
        ),
        migrations.AddField(
            model_name='history',
            name='json_args',
            field=models.TextField(default='[]'),
        ),
        migrations.AddField(
            model_name='history',
            name='revision',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.AlterField(
            model_name='history',
            name='json_args',
            field=models.TextField(default='{}'),
        ),
        migrations.AddField(
            model_name='periodictask',
            name='enabled',
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.AutoField(max_length=20, primary_key=True, serialize=False)),
                ('settings', models.TextField(default='{}')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', related_query_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(
            code=create_user_settings,
        ),
        migrations.AddField(
            model_name='template',
            name='options_data',
            field=models.TextField(default=''),
        ),
        migrations.AlterModelOptions(
            name='history',
            options={'ordering': ['-start_time']},
        ),
        migrations.AddField(
            model_name='aclpermission',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='group',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='history',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='historylines',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='hook',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='host',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='inventory',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='periodictask',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='project',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='task',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='template',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='usersettings',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='variable',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='history',
            name='executor',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='history', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='history',
            name='initiator_type',
            field=models.CharField(default='project', max_length=50),
        ),
        migrations.RunPython(
            code=migrate_history,
        ),
        migrations.AddField(
            model_name='history',
            name='json_options',
            field=models.TextField(default='{}'),
        ),
        migrations.AddField(
            model_name='group',
            name='notes',
            field=models.TextField(default=''),
        ),
        migrations.AddField(
            model_name='host',
            name='notes',
            field=models.TextField(default=''),
        ),
        migrations.AddField(
            model_name='inventory',
            name='notes',
            field=models.TextField(default=''),
        ),
        migrations.AddField(
            model_name='periodictask',
            name='notes',
            field=models.TextField(default=''),
        ),
        migrations.AddField(
            model_name='project',
            name='notes',
            field=models.TextField(default=''),
        ),
        migrations.AddField(
            model_name='template',
            name='notes',
            field=models.TextField(default=''),
        ),
        migrations.AlterField(
            model_name='group',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_group_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='host',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_host_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='inventory',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_inventory_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='periodictask',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_periodictask_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_project_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='template',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_template_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usergroup',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='usergroup',
            name='owner',
            field=models.ForeignKey(default=polemarch.main.models.base.first_staff_user, on_delete=django.db.models.deletion.CASCADE, related_name='polemarch_usergroup_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usergroup',
            name='notes',
            field=models.TextField(default=''),
        ),
        migrations.AddField(
            model_name='periodictask',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='periodic_tasks', related_query_name='periodic_tasks', to='main.Template'),
        ),
        migrations.AddField(
            model_name='periodictask',
            name='template_opt',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
    ]
